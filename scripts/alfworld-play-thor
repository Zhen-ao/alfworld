#!/usr/bin/env python

import os
import copy
import glob
import json
import math
import random
import argparse
from os.path import join as pjoin


import numpy as np
import matplotlib.pyplot as plt
from PIL import Image, ImageDraw
from ai2thor.controller import Controller

import alfworld.agents
from alfworld.info import ALFWORLD_DATA
from alfworld.env.thor_env import ThorEnv
from alfworld.agents.detector.mrcnn import load_pretrained_model
from alfworld.agents.controller import OracleAgent, OracleAStarAgent, MaskRCNNAgent, MaskRCNNAStarAgent


class ThorPositionTo2DFrameTranslator(object):
   def __init__(self, frame_shape, cam_position, orth_size):
      self.frame_shape = frame_shape
      self.lower_left = np.array((cam_position[0], cam_position[2])) - orth_size
      self.span = 2 * orth_size

   def __call__(self, position):
      if len(position) == 3:
            x, _, z = position
      else:
            x, z = position

      camera_position = (np.array((x, z)) - self.lower_left) / self.span
      return np.array(
            (
               round(self.frame_shape[0] * (1.0 - camera_position[1])),
               round(self.frame_shape[1] * camera_position[0]),
            ),
            dtype=int,
      )


def position_to_tuple(position):
   return (position["x"], position["y"], position["z"])


def get_agent_map_data(c: Controller):
   c.step({"action": "ToggleMapView"})
   cam_position = c.last_event.metadata["cameraPosition"]
   cam_orth_size = c.last_event.metadata["cameraOrthSize"]
   pos_translator = ThorPositionTo2DFrameTranslator(
      c.last_event.frame.shape, position_to_tuple(cam_position), cam_orth_size
   )
   to_return = {
      "frame": c.last_event.frame,
      "cam_position": cam_position,
      "cam_orth_size": cam_orth_size,
      "pos_translator": pos_translator,
   }
   c.step({"action": "ToggleMapView"})
   return to_return


def add_agent_view_triangle(
      position, rotation, frame, pos_translator, scale=1.0, opacity=0.7
   ):
      p0 = np.array((position[0], position[2]))
      p1 = copy.copy(p0)
      p2 = copy.copy(p0)

      theta = -2 * math.pi * (rotation / 360.0)
      rotation_mat = np.array(
         [[math.cos(theta), -math.sin(theta)], [math.sin(theta), math.cos(theta)]]
      )
      offset1 = scale * np.array([-1, 1]) * math.sqrt(2) / 2
      offset2 = scale * np.array([1, 1]) * math.sqrt(2) / 2

      p1 += np.matmul(rotation_mat, offset1)
      p2 += np.matmul(rotation_mat, offset2)

      img1 = Image.fromarray(frame.astype("uint8"), "RGB").convert("RGBA")
      img2 = Image.new("RGBA", frame.shape[:-1])  # Use RGBA

      opacity = int(round(255 * opacity))  # Define transparency for the triangle.
      points = [tuple(reversed(pos_translator(p))) for p in [p0, p1, p2]]
      draw = ImageDraw.Draw(img2)
      draw.polygon(points, fill=(255, 255, 255, opacity))

      img = Image.alpha_composite(img1, img2)
      return np.array(img.convert("RGB"))


def setup_scene(env, traj_data, r_idx, args, reward_type='dense'):
    # scene setup
    scene_num = traj_data['scene']['scene_num']
    object_poses = traj_data['scene']['object_poses']
    dirty_and_empty = traj_data['scene']['dirty_and_empty']
    object_toggles = traj_data['scene']['object_toggles']

    scene_name = 'FloorPlan%d' % scene_num
    env.reset(scene_name, make_agents_visible=args.view)
    env.restore_scene(object_poses, object_toggles, dirty_and_empty, make_agents_visible=args.view)

    # initialize to start position
    env.step(dict(traj_data['scene']['init_action']))

    # print goal instr
    print("Task: %s" % (traj_data['turk_annotations']['anns'][r_idx]['task_desc']))

    # setup task for reward
    env.set_task(traj_data, args, reward_type=reward_type)


def main(args):
    print(f"Playing '{args.problem}'.")

    # start THOR
    env = ThorEnv()

    # load traj_data
    root = args.problem
    json_file = os.path.join(root, 'traj_data.json')
    with open(json_file, 'r') as f:
        traj_data = json.load(f)

    # setup scene
    setup_scene(env, traj_data, 0, args)

    # choose controller
    if args.controller == "oracle":
        AgentModule = OracleAgent
        agent = AgentModule(env, traj_data, traj_root=root, load_receps=args.load_receps, debug=args.debug)
    elif args.controller == "oracle_astar":
        AgentModule = OracleAStarAgent
        agent = AgentModule(env, traj_data, traj_root=root, load_receps=args.load_receps, debug=args.debug)
    elif args.controller == "mrcnn":
        AgentModule = MaskRCNNAgent
        mask_rcnn = load_pretrained_model(pjoin(ALFWORLD_DATA, "detectors", "mrcnn.pth"))
        agent = AgentModule(env, traj_data, traj_root=root,
                            pretrained_model=mask_rcnn,
                            load_receps=args.load_receps, debug=args.debug)
    elif args.controller == "mrcnn_astar":
        AgentModule = MaskRCNNAStarAgent
        mask_rcnn = load_pretrained_model(pjoin(ALFWORLD_DATA, "detectors", "mrcnn.pth"))
        agent = AgentModule(env, traj_data, traj_root=root,
                            pretrained_model=mask_rcnn,
                            load_receps=args.load_receps, debug=args.debug)
    else:
        raise NotImplementedError()

    print(agent.feedback)
    while True:

        if args.view:
            t = get_agent_map_data(env)
            new_frame = add_agent_view_triangle(
                position_to_tuple(env.last_event.metadata["agent"]["position"]),
                env.last_event.metadata["agent"]["rotation"]["y"],
                t["frame"],
                t["pos_translator"],
            )
            plt.imshow(new_frame)
            plt.show()

        cmd = input()
        if cmd == "ipdb":
            from ipdb import set_trace; set_trace()
            continue

        agent.step(cmd)
        if not args.debug:
            print(agent.feedback)

        done = env.get_goal_satisfied()
        if done:
            print("You won!")
            break


if __name__ == "__main__":
    description = "Play the abstract text version of an ALFRED environment."
    parser = argparse.ArgumentParser(description=description)
    parser.add_argument("problem", nargs="?", default=None,
                        help="Path to a folder containing PDDL and traj_data files."
                             f"Default: pick one at random found in {ALFWORLD_DATA}")
    parser.add_argument("--controller", default="oracle", choices=["oracle", "oracle_astar", "mrcnn", "mrcnn_astar"])
    parser.add_argument("--debug", action="store_true")
    parser.add_argument('--load_receps', action="store_true")
    parser.add_argument('--reward_config', type=str, default=pjoin(alfworld.agents.__path__[0], 'config', 'rewards.json'))
    parser.add_argument("--view", action="store_true")
    args = parser.parse_args()

    if args.problem is None:
        problems = glob.glob(pjoin(ALFWORLD_DATA, "**", "initial_state.pddl"), recursive=True)
        args.problem = os.path.dirname(random.choice(problems))

    main(args)
